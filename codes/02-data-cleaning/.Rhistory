scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
print(ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y))))
setwd("~/MATH-340/Week 5")
alligator = read.table("Alligators.txt")
school = read.table("SchoolSubject.txt")
### Alligator Exercise ###
alligator
alligator = read.table("Alligators.txt",header=T)
### Alligator Exercise ###
alligator
### Alligator Exercise ###
head(alligator)
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
library(MASS)
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
installed.packages("nnet")
install.packages("nnet")
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
library(nnet)
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
summary(alligator.nom)
?multinom
alligator.nom$AIC
head(school.nom)
head(school)
school = read.table("SchoolSubject.txt",header=T)
head(school)
### School Subject Exercise ###
school.nom <- multinom(Subject~TeachingMethod + Age,data=school)
summary(school.nom)
levels(as.factor(school$Subject))
# Math reference
school$mathSubject <- relevel(school$Subject,ref="math")
### School Subject Exercise ###
school$Subject <- as.factor(school$Subject)
# Arts reference
school.nom <- multinom(Subject~TeachingMethod + Age,data=school)
summary(school.nom)
# Math reference
school$mathSubject <- relevel(school$Subject,ref="math")
### School Subject Exercise ###
school$Subject <- as.factor(school$Subject)
# Arts reference
school.nom <- multinom(Subject~TeachingMethod + Age,data=school)
summary(school.nom)
# Math reference
school$mathSubject <- relevel(school$Subject,ref="math")
school.nom <- multinom(Subject~TeachingMethod + Age,data=school)
summary(school.nom)
# Science reference
school$mathSubject <- relevel(school$Subject,ref="science")
school.nom <- multinom(Subject~TeachingMethod + Age,data=school)
summary(school.nom)
### School Subject Exercise ###
school$Subject <- as.factor(school$Subject)
# Arts reference
school.nom <- multinom(Subject~TeachingMethod + Age,data=school)
summary(school.nom)
# Math reference
school$mathSubject <- relevel(school$Subject,ref="math")
school.nom <- multinom(mathSubject~TeachingMethod + Age,data=school)
summary(school.nom)
# Science reference
school$sciSubject <- relevel(school$Subject,ref="science")
school.nom <- multinom(sciSubject~TeachingMethod + Age,data=school)
summary(school.nom)
View(school)
school$TeachingMethod-bool <- as.numeric(school$TeachingMethod)
View(school)
school$TeachingMethod_bool <- as.numeric(school$TeachingMethod)
school$TeachingMethod_bool <- ifelse(school$TeachingMethod=="lecture",1,0)
### School Subject Exercise ###
school$Subject <- as.factor(school$Subject)
school$TeachingMethod_bool <- ifelse(school$TeachingMethod=="lecture",1,0)
# Arts reference
school.nom <- multinom(Subject~TeachingMethod + Age,data=school)
summary(school.nom)
# Math reference
school$mathSubject <- relevel(school$Subject,ref="math")
school.nom <- multinom(mathSubject~TeachingMethod + Age,data=school)
summary(school.nom)
# Science reference
school$sciSubject <- relevel(school$Subject,ref="science")
school.nom <- multinom(sciSubject~TeachingMethod + Age,data=school)
summary(school.nom)
### School Subject Exercise ###
school$Subject <- as.factor(school$Subject)
school$TeachingMethod_bool <- ifelse(school$TeachingMethod=="lecture",1,0)
# Arts reference
school.nom <- multinom(Subject~TeachingMethod_bool + Age,data=school)
summary(school.nom)
# Math reference
school$mathSubject <- relevel(school$Subject,ref="math")
school.nom <- multinom(mathSubject~TeachingMethod_bool + Age,data=school)
summary(school.nom)
# Science reference
school$sciSubject <- relevel(school$Subject,ref="science")
school.nom <- multinom(sciSubject~TeachingMethod_bool + Age,data=school)
summary(school.nom)
library(tidyverse)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
getwd
getwd()
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
View(otp)
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
View(delays)
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
View(otp_mnr)
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
View(otp_mnr)
# Drop missing values columns when appropriate
otp_mnr[ , colSums(is.na(df))==0]
# Drop missing values columns when appropriate
otp_mnr[ , colSums(is.na(otp_mnr))==0]
# Drop missing values columns when appropriate
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
View(otp_lirr)
View(otp_lirr)
subset(otp_lirr,select=-c("AM Peak"))
subset(otp_lirr,select=-"AM Peak")
subset(otp_lirr,select=-c("AM Peak"))
select(otp_lirr,-"AM Peak")
View(delays_mnr)
View(delays_lirr)
delays_mnr <- delays_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
View(otp_mnr)
# Join MNR and LIRR datasets respectively
mnr_ovr <- full_join(otp_mnr,delays_mnr,by=c("ServiceDate","Agency"))
View(mnr_ovr)
lirr_ovr <- full_join(otp_lirr,delays_lirr,by=c("ServiceDate","Agency"))
View(lirr_ovr)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# Drop rows with specific routes (creates duplicate rows if kept)
otp_mnr <- filter(otp_mnr,otp_mnr$Agency=="System Total")
delays_mnr <- filter(delays_mnr,delays_mnr$Agency=="System Total")
otp_lirr <- filter(otp_lirr,otp_lirr$Agency=="System Total")
delays_lirr <- filter(delays_lirr,delays_lirr$Agency=="System Total")
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
# Join MNR and LIRR datasets respectively
mnr_ovr <- full_join(otp_mnr,delays_mnr,by=c("ServiceDate","Agency"))
lirr_ovr <- full_join(otp_lirr,delays_lirr,by=c("ServiceDate","Agency"))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# Drop rows with specific routes (creates duplicate rows if kept)
otp_mnr <- filter(otp_mnr,otp_mnr$`Branch / Line`=="System Total")
otp_lirr <- filter(otp_lirr,otp_lirr$`Branch / Line`=="System Total")
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
# Join MNR and LIRR datasets respectively
mnr_ovr <- full_join(otp_mnr,delays_mnr,by=c("ServiceDate","Agency"))
lirr_ovr <- full_join(otp_lirr,delays_lirr,by=c("ServiceDate","Agency"))
View(mnr_ovr)
View(lirr_ovr)
View(delays_lirr)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# Drop rows with specific routes (creates duplicate rows if kept)
otp_mnr <- filter(otp_mnr,otp_mnr$`Branch / Line`=="System Total")
otp_lirr <- filter(otp_lirr,otp_lirr$`Branch / Line`=="System Total")
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
# Join MNR and LIRR datasets respectively
mnr_ovr <- full_join(otp_mnr,delays_mnr,by=c("ServiceDate","Agency"))
lirr_ovr <- full_join(otp_lirr,delays_lirr,by=c("ServiceDate","Agency"))
str(mnr_ovr)
?as.Date
# Type cast to date type
mnr_ovr$ServiceDate <-
as.Date(mnr_ovr$ServiceDate,"%m%d%y")
# Type cast to date type
mnr_ovr$ServiceDate <- as.Date(mnr_ovr$ServiceDate,"%m%d%y")
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# Drop rows with specific routes (creates duplicate rows if kept)
otp_mnr <- filter(otp_mnr,otp_mnr$`Branch / Line`=="System Total")
otp_lirr <- filter(otp_lirr,otp_lirr$`Branch / Line`=="System Total")
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
# Join MNR and LIRR datasets respectively
mnr_ovr <- full_join(otp_mnr,delays_mnr,by=c("ServiceDate","Agency"))
lirr_ovr <- full_join(otp_lirr,delays_lirr,by=c("ServiceDate","Agency"))
# Type cast to date type
mnr_ovr$ServiceDate <- as.Date(mnr_ovr$ServiceDate,"%m %d %y")
# Type cast to date type
mnr_ovr$ServiceDate <- as.Date(mnr_ovr$ServiceDate, format="%m%d%y")
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# Drop rows with specific routes (creates duplicate rows if kept)
otp_mnr <- filter(otp_mnr,otp_mnr$`Branch / Line`=="System Total")
otp_lirr <- filter(otp_lirr,otp_lirr$`Branch / Line`=="System Total")
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
# Join MNR and LIRR datasets respectively
mnr_ovr <- full_join(otp_mnr,delays_mnr,by=c("ServiceDate","Agency"))
lirr_ovr <- full_join(otp_lirr,delays_lirr,by=c("ServiceDate","Agency"))
# Type cast to date type
as.Date(mnr_ovr$ServiceDate, format="%m%d%y")
Sys.date()
Sys.Date()
# Type cast to date type
as.Date(mnr_ovr$ServiceDate, format="%m/%d/%y")
# Type cast to date type
as.Date(mnr_ovr$ServiceDate, format="%d/%m/%y")
# Type cast to date type
as.Date(mnr_ovr$ServiceDate, format="%m/%d/%y")
# Type cast to date type
as.Date(lirr_ovr$ServiceDate, format="%m/%d/%y")
# Type cast to date type
as.Date(lirr_ovr$ServiceDate, format="%m/%d/%Y")
# Type cast to date type
as.Date(mnr_ovr$ServiceDate, format="%m/%d/%Y")
# Type cast to date type
mnr_ovr$ServiceDate <-as.Date(mnr_ovr$ServiceDate, format="%m/%d/%Y")
lirr_ovr$ServiceDate <-as.Date(lirr_ovr$ServiceDate, format="%m/%d/%Y")
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import MNR/LIRR On Time Performance Data
otp <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-on-time-performance-beginning-2015-1.csv")
# Import MNR/LIRR Delays/Reliability Data
delays <- read_csv("../../data/00-raw-data/lirr-metro-north-data/mta-lirr-and-metro-north-service-reliability-beginning-2015-1.csv")
# Split data frames by agency for easier merging later on
otp_mnr <- filter(otp,otp$Agency=="MNR")
otp_lirr <- filter(otp,otp$Agency=="LIRR")
delays_mnr <- filter(delays,delays$Agency=="MNR")
delays_lirr <- filter(delays,delays$Agency=="LIRR")
# Drop columns containing entirely missing (NA) values --- LIRR dataframes do not require this
otp_mnr <- otp_mnr[ , colSums(is.na(otp_mnr))==0]
delays_mnr <- delays_mnr[ , colSums(is.na(delays_mnr))==0]
# Drop rows with specific routes (creates duplicate rows if kept)
otp_mnr <- filter(otp_mnr,otp_mnr$`Branch / Line`=="System Total")
otp_lirr <- filter(otp_lirr,otp_lirr$`Branch / Line`=="System Total")
# AM Peak for OTP LIRR contains excessive number of missing values, and thus is dropped
otp_lirr <- select(otp_lirr,-"AM Peak")
# Join MNR and LIRR datasets respectively
mnr_ovr <- full_join(otp_mnr,delays_mnr,by=c("ServiceDate","Agency"))
lirr_ovr <- full_join(otp_lirr,delays_lirr,by=c("ServiceDate","Agency"))
# Type cast to date type
mnr_ovr$ServiceDate <-as.Date(mnr_ovr$ServiceDate, format="%m/%d/%Y")
lirr_ovr$ServiceDate <-as.Date(lirr_ovr$ServiceDate, format="%m/%d/%Y")
str(lirr_ovr)
str(mnr_ovr)
library(tidyverse)
library(lubridate)
library(rstudioapi)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import fare data set
fares <- read_csv("../../data/00-raw-data/MTA-Fare-Card-Data-From-2010.csv")
View(fares)
?read_csv
str(fares)
levels(as.factor(fares$station))
# Remove rows containing bus stop names and PATH station names
fares <- filter(fares,startsWith(fares$station,"PA-"))
fares <- filter(fares,startsWith(fares$station,"SBS-"))
?endsWith
fares <- filter(fares,endsWith(fares$station,"DEPOT"))
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import fare card data set
fares <- read_csv("../../data/00-raw-data/MTA-Fare-Card-Data-From-2010.csv")
# Remove rows containing bus stop names, depot names, and PATH station names
fares <- filter(fares,startsWith(fares$station,"PA-"))
fares <- filter(fares,startsWith(fares$station,"SBS-"))
fares <- filter(fares,endsWith(fares$station,"DEPOT"))
# Remove specific rows with station names not relevant to analysis
fares <- filter(fares,fares$station=="UNUSED")
levels(as.factor(fares$station))
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import fare card data set
fares <- read_csv("../../data/00-raw-data/MTA-Fare-Card-Data-From-2010.csv")
# Remove rows containing bus stop names, depot names, and PATH station names
fares <- filter(fares,startsWith(fares$station,"PA-"))
fares <- filter(fares,startsWith(fares$station,"SBS-"))
fares <- filter(fares,endsWith(fares$station,"DEPOT"))
# Remove specific rows with station names not relevant to analysis
fares <- filter(fares,fares$station!="UNUSED")
levels(as.factor(fares$station))
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import fare card data set
fares <- read_csv("../../data/00-raw-data/MTA-Fare-Card-Data-From-2010.csv")
# Remove rows containing bus stop names, depot names, and PATH station names
fares <- filter(fares,!startsWith(fares$station,"PA-"))
fares <- filter(fares,!startsWith(fares$station,"SBS-"))
fares <- filter(fares,!endsWith(fares$station,"DEPOT"))
# Remove specific rows with station names not relevant to analysis
fares <- filter(fares,fares$station!="UNUSED")
levels(as.factor(fares$station))
?apply
# Check for NA values in columns
apply(fares,2,function(x),is.na())
# Check for NA values in columns
apply(fares,2,function(x) is.na())
# Check for NA values in columns
apply(fares,2,function(x) is.na(x))
# Check for NA values in columns
which(apply(fares,2,function(x) is.na(x))==F)
# Check for NA values in columns
which(apply(fares,2,function(x) is.na(x))==T)
# Check for NA values in columns
tail(which(apply(fares,2,function(x) is.na(x))==T))
# Check for NA values in columns
tail(which(apply(fares$station,2,function(x) is.na(x))==T))
# Check for NA values in columns
tail(which(apply(fares$station,function(x) is.na(x))==T))
# Check for NA values in columns
tail(which(apply(fares$station,1,function(x) is.na(x))==T))
# Check for NA values in columns
tail(which(apply(fares$station,2,function(x) is.na(x))==T))
sum(is.na(fares))
sum(is.na(fares$station))
sum(is.na(fares$_14_day_unlimited))
sum(is.na(fares$`...1`))
sum(is.na(fares$`_7_day_express_bus_pass`))
# Check for NA values in columns
filter(fares,which(apply(fares$station,2,function(x) is.na(x))==T))
# Check for NA values in columns
filter(fares,which(apply(fares,2,function(x) is.na(x))==T))
colSums(is.na(fares))
colSums(fares)
colSums(is.numeric(fares))
# NA values found in 3 columns, columns with NA values are not necessary for analysis and will be dropped
# Unnecessary columns dropped
colSums(Filter(is.numeric,fares))
# Import fare card data set
fares <- read_csv("../../data/00-raw-data/MTA-Fare-Card-Data-From-2010.csv",row.names=1)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import fare card data set
fares <- read.csv("../../data/00-raw-data/MTA-Fare-Card-Data-From-2010.csv",row.names=1)
# Remove rows containing bus stop names, depot names, and PATH station names
fares <- filter(fares,!startsWith(fares$station,"PA-"))
fares <- filter(fares,!startsWith(fares$station,"SBS-"))
fares <- filter(fares,!endsWith(fares$station,"DEPOT"))
# Remove specific rows with station names not relevant to analysis
fares <- filter(fares,fares$station!="UNUSED")
#levels(as.factor(fares$station))
# Check for NA values in columns
colSums(is.na(fares))
# NA values found in 3 columns, columns with NA values are not necessary for analysis and will be dropped
# Unnecessary columns dropped
colSums(Filter(is.numeric,fares))
# NA values found in 3 columns, columns with NA values are not necessary for analysis and will be dropped
# Unnecessary columns dropped
select(fares,-contains("airtrain"))
# NA values found in 3 columns, columns with NA values are not necessary for analysis and will be dropped
# Unnecessary columns dropped
fares <- select(fares,-contains("airtrain"))
fares <- select(fares,-contains("bus"))
fares <- select(fares,-contains("path"))
# Check data types of columns
str(fares)
# Type cast date columns to date type
as.Date(fares$from_date)
# Type cast date columns to date type
fares$from_date <- as.Date(fares$from_date)
fares$to_date <- as.Date(fares$to_date)
# Check data types of columns
str(fares)
colSums(fares$full_fare)
?colSums
colSums(fares$full_fare,dims=2)
colSums(fares)
colSums(Filter(is.numeric)fares)
colSums(Filter(is.numeric,fares)
colSums(Filter(is.numeric,fares))
colSums(Filter(is.numeric,fares))
sum(fares$full_fare)
sum(fares$full_fare)/colSums(Filter(is.numeric,fares))
