for (i in 1:10){
c1 = data.frame('CX'=sum(df[which(df$y==1),1])/100,'CY'=sum(df[which(df$y==1),2])/100,'y'=1)
c2 = data.frame('CX'=sum(df[which(df$y==2),1])/100,'CY'=sum(df[which(df$y==2),2])/100,'y'=2)
for (i in 1:nrow(df)){
row = df[i,]
distance1 <- fun_euc1(row$X1,row$X2,c1$CX,c1$CY)
distance2 <- fun_euc2(row$X1,row$X2,c2$CX,c2$CY)
if (distance1<distance2){
df[i,'y'] = 1
} else{
df[i,'y'] = 2
}
}
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = df$y))+
guides(colour=guide_legend(title="Cluster Labels"))+
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))
}
}
fun_kmeans(linear.data)
---
title: "Assignment 7"
author: "Alex Pattarini"
date: "07/24/2022"
output: rmdformats::robobook
---
# K-mean Clustering
Let's create a function for K-means clustering algorithm.
![](cl.png)
#### Details of Above Figure
The progress of the K-means algorithm with K=3.
• <span style="color:green">Top left:</span> The observations are shown.
• <span style="color:green">Top center:</span> In Step 1 of the algorithm, each observation is randomly assigned to a cluster using some kind of a label. It could be "1", "2" or "green", "red" etc.
• <span style="color:green">Top right:</span> In Step 2(a), the cluster centroids are computed. These are shown as large colored disks. Initially the centroids are almost completely overlapping because the initial cluster assignments were chosen at random.
Also, the cluster centroids are is the mean vector.
• <span style="color:green">Bottom left:</span> In Step 2(b), each observation is assigned to the nearest centroid. This is done using the euclidean distance between the points and the cluster centers.
• <span style="color:green">Bottom center:</span> Step 2(a) is once again performed, leading to new cluster centroids.
• <span style="color:green">Bottom right:</span> The results obtained after 10 iterations.
Think about:
** The iterative steps for the algorithm. What is the starting point? What is the update rule for the centroids? What is the update rule for the "assignment" of each data point to a cluster?
** What data structures might you use for implementing this algorithm? DataFrame or Vectors would be fine, just think about what you need to keep track of during each iteration.
** Within your implementation, create a way to visualize our 2D dataset during each implementation. That is, it is helpful to visualize the cluster "assignments" and centroids during each iteration.
We begin with a simple simulated example in which there truly are two clusters in the data:
the first 25 observations have a mean shift relative to the next 25 observations.
```{r }
makelinear = function(N,dist, makeplot = T){
x=matrix(rnorm(4*N),2*N,2)
y=rep(c(2,1),c(N,N))
x[y==1,]=x[y==1,] + dist
if(makeplot){plot(x,col=y+3,pch=19)}
return(list(x=x,y=y))
}
```
```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```
```{r}
A = makelinear(100, dist = 4.5, makeplot = F)
x = A$x
y = A$y
linear.data = data.frame(x,y=as.factor(y))
linear.data %>%
ggplot()+
geom_point(aes(x=X1,y=X2,colour = y))+
guides(colour=guide_legend(title="Cluster Labels"))
```
Follow these steps to write the function for the algorithm:
1. Make a copy of "linear.data" and name it as `df`.
2. Create a variable name `label` that has 200 values of "1" and "2"; 100 each.
3. Get a random sample of size 200 from this label without replacement; and name the sample as "cl_label".
4. Reset labels in `df` using `cl_label`.
5. Calculate the cluster centroids. `c1` would be the centroid (mean vector) of points that has the label "1" and `c2` would be the centroid (mean vector) of points that has the label "2".
6. Plot X1 vs X2 and color them according to the label. Are they separated yet?
7. Write a function to calculate the euclidean distance between each point and the cluster centroids.
_Next you need to re-assign the cluster labels according to the minimum distance between the cluster centroid and each point. We will do this inside a loop_
8. Write a for loop to repeat this algorithm:
a. You can use an if-else statement to check which cluster centroid is closer to which point and re-assign the labels.
b. Then calculate new cluster centroids as mentioned in part 5.
c. Then repeat part a) and b) 10 times.
9. Then plot the points as I have done initially to see if there are 2 clear clusters.
```{r kmeans}
fun_euc1 <- function(X1,X2,CX1,CY1){
dist1 <- sqrt((CX1-X1)^2+(CY1-X2)^2)
return(dist1)
}
fun_euc2 <- function(X1,X2,CX2,CY2){
dist2 <- sqrt((CX2-X1)^2+(CY2-X2)^2)
return(dist2)
}
fun_kmeans <- function(linear.data){
df <- linear.data
label=c(rep(1,100),rep(2,100))
cl_label = sample(label,200)
df["y"] = cl_label
for (i in 1:10){
c1 = data.frame('CX'=sum(df[which(df$y==1),1])/100,'CY'=sum(df[which(df$y==1),2])/100,'y'=1)
c2 = data.frame('CX'=sum(df[which(df$y==2),1])/100,'CY'=sum(df[which(df$y==2),2])/100,'y'=2)
for (i in 1:nrow(df)){
row = df[i,]
distance1 <- fun_euc1(row$X1,row$X2,c1$CX,c1$CY)
distance2 <- fun_euc2(row$X1,row$X2,c2$CX,c2$CY)
if (distance1<distance2){
df[i,'y'] = 1
} else{
df[i,'y'] = 2
}
}
}
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = df$y))+
guides(colour=guide_legend(title="Cluster Labels"))+
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))
}
fun_kmeans(linear.data)
```
makelinear = function(N,dist, makeplot = T){
x=matrix(rnorm(4*N),2*N,2)
y=rep(c(2,1),c(N,N))
x[y==1,]=x[y==1,] + dist
if(makeplot){plot(x,col=y+3,pch=19)}
return(list(x=x,y=y))
}
makelinear = function(N,dist, makeplot = T){
x=matrix(rnorm(4*N),2*N,2)
y=rep(c(2,1),c(N,N))
x[y==1,]=x[y==1,] + dist
if(makeplot){plot(x,col=y+3,pch=19)}
return(list(x=x,y=y))
}
```{r, message=FALSE, warning=FALSE}
library(tidyverse)
A = makelinear(100, dist = 4.5, makeplot = F)
x = A$x
y = A$y
linear.data = data.frame(x,y=as.factor(y))
linear.data %>%
ggplot()+
geom_point(aes(x=X1,y=X2,colour = y))+
guides(colour=guide_legend(title="Cluster Labels"))
linear.data %>%
ggplot()+
geom_point(aes(x=X1,y=X2,colour = y))+
guides(colour=guide_legend(title="Cluster Labels"))
fun_euc1 <- function(X1,X2,CX1,CY1){
dist1 <- sqrt((CX1-X1)^2+(CY1-X2)^2)
return(dist1)
}
fun_euc2 <- function(X1,X2,CX2,CY2){
dist2 <- sqrt((CX2-X1)^2+(CY2-X2)^2)
return(dist2)
}
fun_kmeans <- function(linear.data){
df <- linear.data
label=c(rep(1,100),rep(2,100))
cl_label = sample(label,200)
df["y"] = cl_label
for (i in 1:10){
c1 = data.frame('CX'=sum(df[which(df$y==1),1])/100,'CY'=sum(df[which(df$y==1),2])/100,'y'=1)
c2 = data.frame('CX'=sum(df[which(df$y==2),1])/100,'CY'=sum(df[which(df$y==2),2])/100,'y'=2)
for (i in 1:nrow(df)){
row = df[i,]
distance1 <- fun_euc1(row$X1,row$X2,c1$CX,c1$CY)
distance2 <- fun_euc2(row$X1,row$X2,c2$CX,c2$CY)
if (distance1<distance2){
df[i,'y'] = 1
} else{
df[i,'y'] = 2
}
}
}
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = df$y))+
guides(colour=guide_legend(title="Cluster Labels"))+
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))
}
fun_kmeans(linear.data)
df
df <- linear.data
label=c(rep(1,100),rep(2,100))
cl_label = sample(label,200)
df["y"] = cl_label
df
ggplot()+
geom_point(df,aes(x=X1,y=X2,color=y))
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=y))
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=y))+
scale_color_discrete()
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=y))+
scale_color_continuous()
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=y))+
scale_color_manual(values=c("blue","red"))
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=y))+
scale_fill_manual(values=c("blue","red"))
ggplot(df)+
geom_point(aes(x=X1,y=X2,fill=y))+
scale_fill_manual(values=c("blue","red"))
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y)))+
scale_fill_manual(values=c("blue","red"))
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y)))+
scale_fill_manual(title="Cluster Labels",values=c("blue","red"))
?scale_color_manual
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y)))+
scale_color_manual(title="Cluster Labels",values=c("blue","red"))
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y)))+
scale_color_manual(name="Cluster Labels",values=c("blue","red"))
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = factor(df$y)))++
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = factor(df$y)))++
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = factor(df$y)))++
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = factor(df$y)))+
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
df <- linear.data
label=c(rep(1,100),rep(2,100))
cl_label = sample(label,200)
df["y"] = cl_label
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y)))+
scale_color_manual(name="Cluster Labels",values=c("blue","red"))
for (i in 1:10){
c1 = data.frame('CX'=sum(df[which(df$y==1),1])/100,'CY'=sum(df[which(df$y==1),2])/100,'y'=1)
c2 = data.frame('CX'=sum(df[which(df$y==2),1])/100,'CY'=sum(df[which(df$y==2),2])/100,'y'=2)
for (i in 1:nrow(df)){
row = df[i,]
distance1 <- fun_euc1(row$X1,row$X2,c1$CX,c1$CY)
distance2 <- fun_euc2(row$X1,row$X2,c2$CX,c2$CY)
if (distance1<distance2){
df[i,'y'] = 1
} else{
df[i,'y'] = 2
}
}
}
print(ggplot() +
geom_point(aes(x=df$X1,y=df$X2,colour = factor(df$y)))+
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
print(ggplot(df) +
geom_point(aes(x=df$X1,y=df$X2,colour = factor(y)))+
geom_point(aes(x=c1$CX,y=c1$CY,color=c1$y),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=c2$y),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))+
geom_point(aes(x=c1$CX,y=c1$CY,color=factor(c1$y)),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=factor(c2$y)),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
df <- linear.data
label=c(rep(1,100),rep(2,100))
cl_label = sample(label,200)
df["y"] = cl_label
ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y)))+
scale_color_manual(name="Cluster Labels",values=c("blue","red"))
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))+
geom_point(aes(x=c1$CX,y=c1$CY,color=factor(c1$y)),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=factor(c2$y)),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
fun_kmeans <- function(linear.data){
df <- linear.data
label=c(rep(1,100),rep(2,100))
cl_label = sample(label,200)
df["y"] = cl_label
print(ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y)))+
scale_color_manual(name="Cluster Labels",values=c("blue","red")))
for (i in 1:10){
c1 = data.frame('CX'=sum(df[which(df$y==1),1])/100,'CY'=sum(df[which(df$y==1),2])/100,'y'=1)
c2 = data.frame('CX'=sum(df[which(df$y==2),1])/100,'CY'=sum(df[which(df$y==2),2])/100,'y'=2)
for (i in 1:nrow(df)){
row = df[i,]
distance1 <- fun_euc1(row$X1,row$X2,c1$CX,c1$CY)
distance2 <- fun_euc2(row$X1,row$X2,c2$CX,c2$CY)
if (distance1<distance2){
df[i,'y'] = 1
} else{
df[i,'y'] = 2
}
}
}
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))+
geom_point(aes(x=c1$CX,y=c1$CY,color=factor(c1$y)),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=factor(c2$y)),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
}
fun_kmeans(linear.data)
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))
ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red")+
geom_point(aes(x=c1$CX,y=c1$CY,color=factor(c1$y)),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=factor(c2$y)),size=7)))
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red")+
geom_point(aes(x=c1$CX,y=c1$CY,color=factor(c1$y)),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=factor(c2$y)),size=7)))
print(ggplot(df) +
geom_point(aes(x=X1,y=X2,colour = factor(y)))+
geom_point(aes(x=c1$CX,y=c1$CY,color=factor(c1$y)),size=7)+
geom_point(aes(x=c2$CX,y=c2$CY,color=factor(c2$y)),size=7))+
scale_color_manual(name = "Cluster Labels",values=c("blue","red"))
print(ggplot(df)+
geom_point(aes(x=X1,y=X2,color=factor(y))))
setwd("~/MATH-340/Week 6")
aids <- read.delim("AIDSinAustralia.txt")
View(aids)
salamander <- read.delim("salamanders-burn.txt")
View(salamander)
salamander <- read.table("salamanders-burn.txt")
View(salamander)
salamander <- read.table("salamanders-burn.txt",header=T)
View(salamander)
View(aids)
aids <- read.table("AIDSinAustralia.txt")
salamander <- read.table("salamanders-burn.txt",header=T)
View(aids)
aids <- read.table("AIDSinAustralia.txt",header=T)
salamander <- read.table("salamanders-burn.txt",header=T)
aids.pois = glm(deaths~quarter,family=poisson,data=aids)
summary(aids.pois)
aids.pois = glm(deaths~quarter,family="poisson",data=aids)
summary(aids.pois)
setwd("~/MATH-340/Homeworks/HW4")
preg = read.table("PregnancyDuration.txt")
View(preg)
colnames(preg) = c("case","duration","responsed1","responsed2","responsed3","nutrition","age1","age3","alcoholuse","smoking")
library(MASS)
library(nnet)
library(MASS)
preg = read.table("PregnancyDuration.txt")
colnames(preg) = c("case","duration","responsed1","responsed2","responsed3","nutrition","age1","age3","alcoholuse","smoking")
library(nnet)
library(MASS)
preg = read.table("PregnancyDuration.txt")
colnames(preg) = c("case","duration","responsed1","responsed2","responsed3","nutrition","age1","age3","alcoholuse","smoking")
View(preg)
preg.nom = multinom(responsed3~nutrition+age1+age3+alcoholuse+smoking,data=preg)
summary(preg.nom)
# Filter out category 2 positive results
preg[preg$responsed2==1]
# Filter out category 2 positive results
preg[preg$responsed2==1,]
# Filter out category 2 positive results
preg[!preg$responsed2==1,]
# Filter out category 2 positive results
preg1 = preg[!preg$responsed2==1,]
preg.nom = multinom(responsed3~nutrition+age1+age3+alcoholuse+smoking,data=preg1)
summary(preg.nom)
# Filter out category 1 positive results
preg2 = preg[!preg$responsed1==1,]
preg.nom = multinom(responsed3~nutrition+age1+age3+alcoholuse+smoking,data=preg2)
summary(preg.nom)
setwd("~/MATH-340/Week 5")
library(nnet)
library(MASS)
alligator = read.table("Alligators.txt",header=T)
school = read.table("SchoolSubject.txt",header=T)
### Alligator Exercise ###
head(alligator)
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
summary(alligator.nom)
### School Subject Exercise ###
school$Subject <- as.factor(school$Subject)
school$TeachingMethod_bool <- ifelse(school$TeachingMethod=="lecture",1,0)
# Arts reference
school.nom <- multinom(Subject~TeachingMethod_bool + Age,data=school)
summary(school.nom)
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
summary(alligator.nom)
alligator = read.table("Alligators.txt",header=T)
school = read.table("SchoolSubject.txt",header=T)
### Alligator Exercise ###
head(alligator)
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
summary(alligator.nom)
alligator$choice <- relevel(alligator$PrimaryFoodChoice,ref="fish")
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
summary(alligator.nom)
alligator$PrimaryFoodChoice <- as.factor(alligator$PrimaryFoodChoice)
alligator$choice <- relevel(alligator$PrimaryFoodChoice,ref="fish")
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
summary(alligator.nom)
alligator = read.table("Alligators.txt",header=T)
school = read.table("SchoolSubject.txt",header=T)
### Alligator Exercise ###
head(alligator)
alligator$PrimaryFoodChoice <- as.factor(alligator$PrimaryFoodChoice)
alligator$choice <- relevel(alligator$PrimaryFoodChoice,ref="fish")
alligator.nom <- multinom(PrimaryFoodChoice~size+gender,data=alligator)
summary(alligator.nom)
View(alligator)
alligator$PrimaryFoodChoice <- as.factor(alligator$PrimaryFoodChoice)
alligator$choice <- relevel(alligator$PrimaryFoodChoice,ref="fish")
alligator.nom <- multinom(choice~size+gender,data=alligator)
summary(alligator.nom)
summary(preg.nom)
setwd("~/MATH-340/Homeworks/HW4")
library(nnet)
library(MASS)
preg = read.table("PregnancyDuration.txt")
colnames(preg) = c("case","duration","responsed1","responsed2","responsed3","nutrition","age1","age3","alcoholuse","smoking")
library(nnet)
library(MASS)
preg = read.table("PregnancyDuration.txt")
colnames(preg) = c("case","duration","responsed1","responsed2","responsed3","nutrition","age1","age3","alcoholuse","smoking")
# Filter out category 2 positive results
preg1 = preg[!preg$responsed2==1,]
preg.nom = multinom(responsed3~nutrition+age1+age3+alcoholuse+smoking,data=preg1)
summary(preg.nom)
preg.nom = multinom(responsed3~nutrition+age1+age3+alcoholuse+smoking,data=preg1)
summary(preg.nom)
preg.nom = multinom(responsed3~nutrition+age1+age3+alcoholuse+smoking,data=preg)
summary(preg.nom)
setwd("~/MATH-340/Week 5")
library(nnet)
library(MASS)
alligator = read.table("Alligators.txt",header=T)
school = read.table("SchoolSubject.txt",header=T)
### Alligator Exercise ###
head(alligator)
alligator$PrimaryFoodChoice <- as.factor(alligator$PrimaryFoodChoice)
alligator$choice <- relevel(alligator$PrimaryFoodChoice,ref="fish")
alligator.nom <- multinom(choice~size+gender,data=alligator)
summary(alligator.nom)
preg.nom = multinom(duration~nutrition+age1+age3+alcoholuse+smoking,data=preg)
summary(preg.nom)
str(preg)
# Re-level to set reference category as duration = 3
preg$duration3 <- relevel(preg$duration,ref=3)
# Re-level to set reference category as duration = 3
preg$duration3 <- relevel(as.factor(preg$duration),ref=3)
# Nominal regression
preg.nom <- multinom(duration3~nutrition+age1+age3+alcoholuse+smoking,data=preg)
summary(preg.nom)
str(preg)
summary(preg.nom)
View(preg)
# Type cast date columns to date type
fares$from_date <- as.Date(fares$from_date)
library(tidyverse)
library(lubridate)
library(rstudioapi)
# Set working directory to current file location
setwd(dirname(getActiveDocumentContext()$path))
# Import fare card data set
fares <- read.csv("../../data/00-raw-data/MTA-Fare-Card-Data-From-2010.csv",row.names=1)
# Remove rows containing bus stop names, depot names, and PATH station names
fares <- filter(fares,!startsWith(fares$station,"PA-"))
fares <- filter(fares,!startsWith(fares$station,"SBS-"))
fares <- filter(fares,!endsWith(fares$station,"DEPOT"))
# Remove specific rows with station names not relevant to analysis
fares <- filter(fares,fares$station!="UNUSED")
fares <- filter(fares,fares$station!="MTABC - EASTCHESTER 2")
fares <- filter(fares,fares$station!="ORCHARD BEACH")
#levels(as.factor(fares$station))
# Check for NA values in columns
colSums(is.na(fares))
fares <- fares[ , colSums(is.na(fares)) == 0]
# Drop NA columns
# NA values found in 3 columns, will be dealt with in later analyses if they become pertinent
# Unnecessary columns dropped
fares <- select(fares,-contains("airtrain"))
fares <- select(fares,-contains("bus"))
fares <- select(fares,-contains("path"))
# Check data types of columns
#str(fares)
# Type cast date columns to date type
fares$from_date <- as.Date(fares$from_date)
fares$to_date <- as.Date(fares$to_date)
#str(fares)
# Remove duplicates if any
fares <- fares[!duplicated(fares),]
# Gather fares to longer format
fares_gathered <- gather(fares,fare_type,fare_count,-from_date,-to_date,-remote_station_id,-station)
# Remove column
fares_gathered <- fares_gathered[-4]
# Save gathered fares to csv
write.csv(fares_gathered,"../../data/01-modified-data/MTA-Fare-Card-Cleaned-Gathered.csv")
